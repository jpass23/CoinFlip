/* autogenerated by Processing revision 1283 on 2022-12-29 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class CoinFlip extends PApplet {

int red = color(255,0,0); //red
int blue = color(0,0,255); //blue
int green = color(20,255,80); //green
int black = color(0,0,0); //green
float speed = 10.3f;
Player P;
Room[] Rooms = new Room[14];
Board board;
//playerObserver obs; // no need for observer
Point startPos = new PointImpl(100,100);
int startColor = blue;

 public void setup(){
  /* size commented out by preprocessor */;
  textSize(15);
  P = new PlayerImpl(startPos.getX(),startPos.getY(),20,startColor);
  Rooms[0] = new RoomImpl(0,0,150,50,red);
  Rooms[1] = new RoomImpl(150,0,50,150,blue);
  Rooms[2] = new RoomImpl(50,150,100,50,red);
  Rooms[3] = new RoomImpl(0,50,50,100,blue);
  Rooms[4] = new RoomImpl(50,50,100,100,black);
  Rooms[5] = new RoomImpl(0,200,200,50,red);
  Rooms[6] = new RoomImpl(0,150,50,50,black);
  Rooms[7] = new RoomImpl(150,150,50,50,black);
  Rooms[8] = new RoomImpl(0,250,50,50,black);
  Rooms[9] = new RoomImpl(50,250,50,50,red);
  Rooms[10] = new RoomImpl(100,250,100,50,red);
  Rooms[11] = new RoomImpl(0,300,75,50,blue);
  Rooms[12] = new RoomImpl(75,300,75,50,blue);
  Rooms[13] = new RoomImpl(150,300,50,50,green);
  
  board = new BoardImpl(Rooms,P,startPos, startColor);
  //obs = new playerObserverImpl(p);
}

 public void draw(){
  //stroke(0);
  background(0,0,0);
  fill(255,255,255);
  text("Get to the green square", 25,375);
  board.drawBoard();
  P.drawPlayer();
  if(board.crossedWall()){
    P.colorFlip();
  }
  if(P.getColor() == board.getRoom().getColor()){
    board.reset();
  }
}

 public void keyPressed() {
  if (key == CODED) {
    if (keyCode == RIGHT) {
      P.setPos(P.getPos().getX()+speed,P.getPos().getY());
    } else if (keyCode == LEFT) {
      P.setPos(P.getPos().getX()-speed,P.getPos().getY());
    } else if (keyCode == UP) {
      P.setPos(P.getPos().getX(),P.getPos().getY()-speed);
    } else if (keyCode == DOWN) {
      P.setPos(P.getPos().getX(),P.getPos().getY()+speed);
    }
  }
}
interface Board{
  Player getPlayer();
  void drawBoard();
  boolean crossedWall(); //returns true if the player has just switched rooms
  Room getRoom(); //gets room the player is in
  void reset();
}
public class BoardImpl implements Board{
  private Player player;
  private Room[] roomList;
  private Room playerHere;
  private Point startPos;
  private int startColor;
  
  public BoardImpl(Room[] r, Player p, Point pos, int col){
    this.roomList = r;
    this.player = p;
    for(Room room : roomList){
      if(room.isInside(player)){ //if player is in the room
        this.playerHere = room;
      }
    }
    this.startPos = pos;
    this.startColor = col;
  }
  
  public void reset(){
    player.setPos(startPos.getX(),startPos.getY());
    player.setColor(startColor);
    for(Room room : roomList){
      if(room.isInside(player)){ //if player is in the room
        this.playerHere = room;
      }
    }
  }
  
  public Player getPlayer(){
    return this.player;
  }
  public void drawBoard(){
    for(Room r : roomList){
      r.drawRoom();
    }
  }
  public boolean crossedWall(){
    for(Room r : roomList){
      if(r.isInside(player)){ //if player is in the room
        if(!this.playerHere.equals(r)){ //check if it is a new room
          this.playerHere = r;
          return true;
        }
      }
    }
    return false;
  }
  public Room getRoom(){
    return this.playerHere;
  }
}
interface Player{
  int getDiameter();
  int getColor();
  Point getPos();
  void setColor(int c);
  void setPos(float x, float y);
  //void addObserver(playerObserver p);
  //void removeObserver(playerObserver p);
  void drawPlayer();
  void colorFlip();
}
public class PlayerImpl implements Player{
  private final int Diameter;
  private int Color;
  private Point Pos;
  //private ArrayList<playerObserver> observers = new ArrayList<playerObserver>();
  
  public PlayerImpl(float x, float y, int d, int c){
    this.Diameter = d;
    this.Color = c;
    this.Pos = new PointImpl(x,y);
  }
  public int getDiameter(){
    return this.Diameter;
  }
  public int getColor(){
    return this.Color;
  }
  public Point getPos(){
    return this.Pos;
  }
  public void setColor(int c){
    this.Color = c;
    //for(playerObserver o : observers){
    //  o.update();
    //}
  }
   public void setPos(float x, float y){
    this.Pos = new PointImpl(x,y);
    //for(playerObserver o : observers){
    //  o.update();
    //}
  }
   public void drawPlayer(){
    //noStroke();
    fill(Color);
    ellipse(Pos.getX(),Pos.getY(),Diameter,Diameter);
  }
  //void addObserver(playerObserver p){
  //  observers.add(p);
  //}
  //void removeObserver(playerObserver p){
  //  observers.remove(p);
  //}
   public void colorFlip(){
    if(Color == color(255,0,0)){
      this.Color = color(0,0,255);
    }else{
      this.Color = color(255,0,0);
    }
  }
}
interface Point{

   float getX();
  
   float getY();
   
   //void setX(float x);
   
   //void setY(float y);
}
class PointImpl implements Point{
  private final float x;
  private final float y;
  
  public PointImpl(float x, float y){
    this.x = x;
    this.y = y;
  }
  
  public float getX(){
    return this.x;
  }
  
  public float getY(){
    return this.y;
  }
  
  /*
  public void setX(float x){
    this.x = x;
  }
  
  public void setY(float y){
    this.y = y;
  }
  */
}
interface Room{
  int getColor();
  Point getCenter(); 
  int getHeight();
  int getWidth();
  Point getPosition();
  void drawRoom();
  boolean isInside(Player p); //returns true if given player is inside the room
}
public class RoomImpl implements Room{
  private final int Color;
  private final int Width;
  private final int Height;
  private final Point Pos;
  
  public RoomImpl(float x, float y, int w, int h, int c){
    this.Color = c;
    this.Width = w;
    this.Height = h;
    Pos = new PointImpl(x,y);
  }
  public int getColor(){
    return this.Color;
  }
  public Point getPosition(){
    return this.Pos;
  }
  public int getWidth(){
    return this.Width;
  }
  public int getHeight(){
    return this.Height;
  }
  public void drawRoom(){
    fill(Color);
    rect(Pos.getX(),Pos.getY(),Width,Height);
  }
  public Point getCenter(){
    float tempX = Pos.getX()+(Width/2);
    float tempY = Pos.getY()+(Height/2);
    return new PointImpl(tempX,tempY);
  }
  public boolean isInside(Player p){
    if((p.getPos().getX() > Pos.getX()) 
    && (p.getPos().getX() < (Pos.getX()+Width)) 
    && (p.getPos().getY() > Pos.getY())
    && (p.getPos().getY() < (Pos.getY() + Height))){
      return true;
    }
    return false;
  }
}


  public void settings() { size(200, 400); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "CoinFlip" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
